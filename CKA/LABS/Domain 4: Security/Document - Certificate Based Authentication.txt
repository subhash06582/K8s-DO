Document - Certificate Based Authentication
Pre-Requisite:
- Create a Linux container / Linux server were we can run openssl commands.
docker run -dt --name kplabs-kubectl amazonlinux bash
docker exec -it kplabs-kubectl bash
yum -y install openssl nano

- Connect the linux box with existing K8s setup.
Kubectl Installation:
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
chmod +x kubectl
mv kubectl /usr/bin
mkdir ~/.kube
nano ~/.kube/config  <-- copy config value from local digital ocean config

Step 1: Create a new private key  and CSR
openssl genrsa -out zeal.key 2048
mkdir /root/demo
mv zeal.key /root/demo
cd /root/demo
openssl req -new -key zeal.key -out zeal.csr -subj "/CN=zeal/O=kplabs"

Step 2: Encode the csr
cat zeal.csr | base64 | tr -d '\n'

Step 3: Generate the Kubernetes Signing Request
apiVersion: certificates.k8s.io/v1beta1
kind: CertificateSigningRequest
metadata:
  name: zeal-csr
spec:
  groups:
  - system:authenticated
  request: <Base 64 encoded zeal.csr value from previous step>
  usages:
  - digital signature
  - key encipherment
  - client auth

Step 4: Apply the Signing Requests:
kubectl apply -f signingrequest.yaml

Step 5: Approve the csr
kubectl certificate approve zeal-csr

Step 6: Download the Certificate from csr
kubectl get csr zeal-csr -o jsonpath='{.status.certificate}' | base64 -d > zeal.crt

Step 7: Create a new context
kubectl config set-credentials zeal --client-certificate=zeal.crt --client-key=zeal.key

Step 8: Set new Context
kubectl config set-context zeal-context --cluster do-blr1-kplabs-k8s --user=zeal

Step 9: Use Context to Verify
kubectl --context=zeal-context get pods